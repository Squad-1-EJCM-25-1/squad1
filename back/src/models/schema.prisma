generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//Models
//Particionamento Vertical para Herança de Usuário (Filhos: Cliente e Vendedor)
model Usuario {

  idUsuario       Int         @id         @default(autoincrement())
  nome            String                  @db.VarChar(31)
  email           String      @unique
  hash            String
  salt            String
  dataRegistro    DateTime                @default(now())
  imagemURL       String?

  cliente         Cliente?
  vendedor        Vendedor?
  endereco        Endereco?
  telefones       Telefones?

}

model Cliente {

  CPF             String      @unique     @db.Char(11)
  fidelidade      Boolean                 @default(false) 

  idCliente       Int         @id

  usuario Usuario @relation(fields: [idCliente], references: [idUsuario], onDelete: Cascade)

  favoritos   Favorita[]
  avaliacoes  Avalia[]
  compras     Compra[]
  conversas   Conversa[]
  pets        Pet[]

  produtosCarrinho    Carrinho[]

}

model Vendedor {

  CNPJ            String      @unique     @db.Char(14)

  idVendedor      Int         @id

  usuario Usuario @relation(fields: [idVendedor], references: [idUsuario], onDelete: Cascade)

  produtos  Produto[]
  conversas Conversa[]

}

model Conversa {

  idCliente     Int
  idVendedor    Int

  @@id([idCliente, idVendedor])

  cliente   Cliente     @relation(fields: [idCliente], references: [idCliente], onDelete: Restrict)
  vendedor  Vendedor    @relation(fields: [idVendedor], references: [idVendedor], onDelete: Restrict)

  mensagens   Mensagem[]
}

model Mensagem {

  idMensagem    Int         @id       @default(autoincrement())
  conteudo      String                @db.VarChar(120)
  data          DateTime              @default(now())
  remetente     String                @db.VarChar(31)

  idCliente     Int
  idVendedor    Int

  conversa Conversa @relation(fields: [idCliente, idVendedor], references: [idCliente, idVendedor], onDelete: Cascade)

}

model Endereco {

  idEndereco      Int         @unique         @default(autoincrement())
  CEP             String                      @db.Char(8)
  endereco        String                      @db.VarChar(63)
  UF              String                      @db.Char(2)
  bairro          String                      @db.VarChar(15)
  complemento     String?                     @db.VarChar(63)

  idUsuario       Int         @unique

  @@id([idEndereco, idUsuario])

  usuario Usuario @relation(fields: [idUsuario], references: [idUsuario], onDelete: Cascade)

}

model Telefones {

  idTelefones     Int      @id     @default(autoincrement())
  celular         String           @db.Char(11)
  residencial     String?          @db.Char(10)

  idUsuario       Int      @unique

  usuario Usuario @relation(fields: [idUsuario], references: [idUsuario], onDelete: Cascade)

}

enum Categoria {

  Cachorro
  Gato
  Pássaro
  Peixe
  Réptil
  Alimento
  Acessório
  Outro

}

model Produto {

  idProduto     Int       @id       @default(autoincrement())
  nome          String              @db.VarChar(63)
  descricao     String?             @db.VarChar(120)
  preco         Decimal             @db.Money
  categoria     Categoria?
  quantidade    Int
  imagemURL     String?

  idVendedor    Int

  vendedor Vendedor @relation(fields: [idVendedor], references: [idVendedor], onDelete: Cascade)

  favoritos   Favorita[]
  avaliacoes  Avalia[]
  compras     Compra[]
  produtosCarrinho    Carrinho[]

}

//Relações Usuário-Produto
model Favorita {

  idCliente     Int
  idProduto     Int

  @@id([idCliente, idProduto])

  cliente Cliente @relation(fields: [idCliente], references: [idCliente], onDelete: Cascade)
  produto Produto @relation(fields: [idProduto], references: [idProduto], onDelete: Cascade)

}

model Avalia {

  comentario    String?        @db.VarChar(120)
  nota          Int

  idCliente     Int
  idProduto     Int

  @@id([idCliente, idProduto])

  cliente Cliente @relation(fields: [idCliente], references: [idCliente], onDelete: Cascade)
  produto Produto @relation(fields: [idProduto], references: [idProduto], onDelete: Cascade)

}

enum StatusCompra {

  Pendente
  Enviado
  Entregue
  Cancelado

}

enum FormaPagamento {

  Cartão
  PIX
  Boleto

}

model Compra {

  dataCompra      DateTime        @default(now())
  statusCompra    StatusCompra    @default(Pendente)
  formaPagamento  FormaPagamento        
  valorTotal      Decimal         @db.Money

  idCliente       Int             @unique
  idProduto       Int             @unique           
  idCompra        Int             @unique         @default(autoincrement())

  @@id([idCliente, idProduto, idCompra])

  cliente Cliente @relation(fields: [idCliente], references: [idCliente], onDelete: Cascade)
  produto Produto @relation(fields: [idProduto], references: [idProduto], onDelete: Cascade)

}

model Carrinho {

  quantidade    Int

  idCliente     Int
  idProduto     Int

  @@id([idCliente, idProduto])

  cliente Cliente @relation(fields: [idCliente], references: [idCliente], onDelete: Cascade)
  produto Produto @relation(fields: [idProduto], references: [idProduto], onDelete: Cascade)

}

enum Especie {

  Cachorro
  Gato
  Peixe
  Pássaro
  Coelho
  Hamster
  Tartaruga
  Outro

}

//Outras Entidades
model Pet {

  idPet           Int         @unique       @default(autoincrement())
  nome            String                    @db.VarChar(15) 
  especie         Especie                   
  raca            String                    @db.VarChar(31)
  idade           Int?
  peso            Decimal?
  deficiencia     String?                    @db.VarChar(31)

  idCliente       Int
  
  @@id([idPet, idCliente])

  dono      Cliente       @relation(fields: [idCliente], references: [idCliente], onDelete: Cascade)

  vacinas Vacinacao[]
}

model Vacinacao {

  nomeVacina      String                    @db.VarChar(31)
  peso            Decimal?

  data            DateTime                  @db.Date

  idCliente       Int 
  idPet           Int

  @@id([data, idCliente, idPet])

  pet Pet @relation(fields: [idPet, idCliente], references: [idPet, idCliente], onDelete: Cascade)

}